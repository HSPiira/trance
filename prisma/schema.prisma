// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Client model - Base model for both Individual and Company clients
model Client {
  id            String        @id @default(uuid())
  name          String
  email         String
  phone         String
  status        ClientStatus @default(ACTIVE)
  joinDate      DateTime
  lastActive    DateTime
  clientType    ClientType
  counsellor    String?
  avatar        String?
  appointments  Int           @default(0)
  resources     Int           @default(0)
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  company       Company?      // For company clients
  sessions      Session[]
  documents     Document[]
  notes         Note[]
  messages      Message[]
}

// Person model - Base model for both employees and dependants
model Person {
  id            String        @id @default(uuid())
  fullName      String
  dateOfBirth   DateTime
  gender        String
  nationalId    String?       @unique // NIN or similar unique ID
  email         String?
  phone         String?
  address       String?
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  asEmployee      Employee?     // If this person is an employee
  asDependant     Dependant?    // If this person is a dependant
  services      PersonService[] // Services received by this person

  // Indexes
  @@index([fullName, dateOfBirth], name: "idx_person_name_dob")
  @@index([nationalId], name: "idx_person_national_id")
  @@index([email], name: "idx_person_email")
  @@index([phone], name: "idx_person_phone")
}

// Company model - Extends Client for company-specific information
model Company {
  id                  String    @id @default(uuid())
  registrationNumber  String    @unique
  industry            String?
  size                Int?      // Number of employees
  website             String?
  isDeleted           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  client              Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String    @unique
  employees           Employee[]
}

// Employee model - Represents an employee of a company
model Employee {
  id              String    @id @default(uuid())
  employeeNumber  String    @unique
  jobTitle        String?
  department      String?
  hireDate        DateTime
  status          EmployeeStatus @default(ACTIVE)
  isDeleted       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  person          Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId        String    @unique
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  dependants      Dependant[] // Dependants of this employee
}

// Dependant model - Represents a dependant of an employee
model Dependant {
  id                  String    @id @default(uuid())
  relationship        String    // e.g., Child, Spouse, etc.
  isDeleted           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  person              Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId            String    @unique
  dependentOfEmployee Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId          String
}

// Service model - Represents a service offered
model Service {
  id              String    @id @default(uuid())
  serviceName     String
  description     String?
  category        String?
  isActive        Boolean   @default(true)
  isDeleted       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  personServices  PersonService[]
}

// PersonService model - Connects a person to services they receive
model PersonService {
  id              String    @id @default(uuid())
  dateReceived    DateTime
  notes           String?
  isDeleted       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  person          Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId        String
  service         Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId       String
}

// User model - For system users (admin, counselors, etc.)
model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  role      UserRole
  avatar    String?
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  sessions  Session[]
  documents Document[]
  notes     Note[]
  messages  Message[]
  resources Resource[]
}

// Session model
model Session {
  id          String        @id @default(uuid())
  date        DateTime
  duration    Int
  status      SessionStatus
  notes       String?
  type        SessionType
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  counselor   User          @relation(fields: [counselorId], references: [id])
  counselorId String
}

// Document model
model Document {
  id          String        @id @default(uuid())
  title       String
  type        DocumentType
  url         String
  size        Int
  uploadedAt  DateTime      @default(now())
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  uploadedBy  User          @relation(fields: [uploadedById], references: [id])
  uploadedById String
}

// Note model
model Note {
  id          String    @id @default(uuid())
  content     String
  isPrivate   Boolean   @default(false)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
}

// Message model
model Message {
  id          String    @id @default(uuid())
  content     String
  sentAt      DateTime  @default(now())
  readAt      DateTime?
  attachments String[]
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  sender      User      @relation(fields: [senderId], references: [id])
  senderId    String
}

// Resource model
model Resource {
  id          String        @id @default(uuid())
  title       String
  description String
  type        ResourceType
  url         String
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  createdBy   User          @relation(fields: [createdById], references: [id])
  createdById String
}

// Enums
enum ClientType {
  COMPANY @map("company")
  INDIVIDUAL @map("individual")
}

enum ClientStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")
  PENDING @map("pending")
  SUSPENDED @map("suspended")
  TERMINATED @map("terminated")
  ARCHIVED @map("archived")
  DELETED @map("deleted")
  BLOCKED @map("blocked")
  ON_HOLD @map("on_hold")
}

enum EmployeeStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")
  ON_LEAVE @map("on_leave")
  TERMINATED @map("terminated")
  RETIRED @map("retired")
}

enum UserRole {
  ADMIN @map("admin")
  COUNSELOR @map("counselor")
  STAFF @map("staff")
  CLIENT @map("client")
  MANAGER @map("manager")
  SUPER_ADMIN @map("super_admin")
  HR @map("hr")
}

enum SessionStatus {
  SCHEDULED @map("scheduled")
  IN_PROGRESS @map("in_progress")
  RESCHEDULED @map("rescheduled")
  COMPLETED @map("completed")
  CANCELLED @map("cancelled")
  NO_SHOW @map("no_show")
}

enum SessionType {
  INITIAL @map("initial")
  FOLLOW_UP @map("follow_up")
  EMERGENCY @map("emergency")
  GROUP @map("group")
}

enum DocumentType {
  CONSENT @map("consent")
  ASSESSMENT @map("assessment")
  REPORT @map("report")
  INVOICE @map("invoice")
  RECEIPT @map("receipt")
  CONTRACT @map("contract")
  POLICY @map("policy")
  GUIDELINES @map("guidelines")
  FORM @map("form")
  CERTIFICATE @map("certificate")
  MANUAL @map("manual")
  PRESENTATION @map("presentation")
  BROCHURE @map("brochure")
  FLYER @map("flyer")
  POSTER @map("poster")
  NEWSLETTER @map("newsletter")
  OTHER @map("other")
}

enum ResourceType {
  ARTICLE @map("article")
  VIDEO @map("video")
  WORKSHOP @map("workshop")
  WEBINAR @map("webinar")
  PODCAST @map("podcast")
  TOOL @map("tool")
  TEMPLATE @map("template")
  EBOOK @map("ebook")
  GUIDE @map("guide")
  CHECKLIST @map("checklist")
  QUIZ @map("quiz")
  ASSESSMENT @map("assessment")
  INFOGRAPHIC @map("infographic")
  PRESENTATION @map("presentation")
  CASE_STUDY @map("case_study")
  WHITEPAPER @map("whitepaper")
  RESEARCH @map("research")
  REPORT @map("report")
  STUDY @map("study")
} 